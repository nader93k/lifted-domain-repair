# Working example used as reference
successor_generator: missing
use_ff: True
search_algorithm: ucs
heuristic_relaxation: unary
lift_prob: 0.33
min_length: 1
max_length: 15
timeout_seconds: 900  # 15 minutes * 60 seconds/minute
order: increasing
benchmark_path: input/benchmarks-G1
log_folder: exp_logs_debug/
log_interval: 1000000
domain_class: null


###### Supported values
# search_algorithm:
#   ucs: uniform cost search
#   g_astar: greedy_astar
#   astar
#   ucs: uniform cost search
#   greedy
#   dfs
#   bb: branch & bound
#
# successor_generator: 'missing', 'missing-and-negative', 'exhaust'
# They correspond to RELAX_PRE, RELAX_DEL, and EXHAUST in the paper.
#
# heuristic_relaxation: zeroary, null, unary
#
# lift_prob: 0 to 1.0. Probability of turning each action parameter from an object to a variable.
# 1 means all objects in the action traces turn into variables, 0 means they remain grounded.
# Caution: This is useful only when your test plan is fully grounded, and you want to randomly lift
# some of the parameters. If your whitelist plan is already lifted or partially lifted, set this
# to 0.
#
# min_length & max_length: integers greater than zero. Used to filter benchmarks for problems
# that have an action trace within the specified length bounds.
#
# timeout_seconds: max time for the search per instance in seconds.
#
# log_interval: how frequently search details are logged. Use small values for debugging.
# Use large values (e.g., 1000000) otherwise.
#
# order: "increasing" or "random" (without double quotes). "increasing" solves problems
# with shorter action traces first.
#
# benchmark_path: path holding the problems to be solved. The folder structure should be
# similar to the benchmark we used. Refer to README.md for more information.
#
# log_folder: folder where log files will be saved.
#
# domain_class: "null" or the domain name (e.g., "mprime"). Mostly used for testing on a subset
# of benchmarks. For end users it can be null.
